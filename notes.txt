Notes: 
1) Synchronized List vs CopyOnWriteArrayList
    http://www.java67.com/2015/06/difference-between-synchronized-arraylist-and-copyOnWriteArrayList-java.html
    Test 1e6 loops to compare, the best was (a)
  -CopyOnWriteArrayList:
    a)  CopyOnWriteArrayList<Point> proyectionPointList = new CopyOnWriteArrayList<>();
        1844459468ns
  -SinchronizedList:
    b)  List<Point> proyectionPointList = Collections.synchronizedList(new ArrayList<Point>()); ...
        synchronized (grBody.orbit.proyectionPointList) {
        Iterator<Point> iter = grBody.orbit.proyectionPointList.iterator();
        while (iter.hasNext()) { Point orbitPoint = iter.next(); ... }
        2980145022ns
    c)  List<Point> proyectionPointList = Collections.synchronizedList(new ArrayList<Point>()); ...
        synchronized (grBody.orbit.proyectionPointList) {
        for (Point orbitPoint : grBody.orbit.proyectionPointList) { ... }
        2952353882ns
        

2) Symbols
    https://unicode-search.net/unicode-namesearch.pl?term=arrow http://xahlee.info/comp/unicode_arrows.html
    ▲▼◄► ↻↶ ↷↺


3) how to simply implement a KeyListener?
    https://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener
    a) in class add: implements KeyListener 
        public class GraphScreen extends JComponent implements KeyListener {
    b) in constructor add the key listener and remove the focusable of buttons else will lost focus from keys:  
        addKeyListener(this);
        <every_button>.setFocusable(false);
    c) Add requestFocus() in a overrided addNotify():
        public void addNotify() { super.addNotify(); requestFocus(); }
    d) finally override the KeyListener abstract methods:
        public void keyPressed(KeyEvent e) { }
        public void keyReleased(KeyEvent e) { }
        public void keyTyped(KeyEvent e) { c = e.getKeyChar();  }

4) References
    http://danielmarin.naukas.com/2011/10/24/como-viajar-a-marte
    https://www.clarin.com/sociedad/viajar-llegar-Marte_0_B1HDPzFD7l.html
    http://www2.esm.vt.edu/~sdross/papers/AmericanScientist2006.pdf
    http://www.sc.ehu.es/sbweb/fisica_/celeste/kepler2/kepler2.html
    http://www.sc.ehu.es/sbweb/fisica/celeste/kepler3/kepler3.html
    https://astrojem.com/teorias/marte.html
    http://www.europapress.es/ciencia/misiones-espaciales/noticia-proponen-viaje-marte-mas-barato-esperas-20141226125647.html
    http://www.astronoo.com/es/articulos/posiciones-de-los-planetas.html
    https://www.geogebra.org/m/egN8dBKb
    https://solarsystem.nasa.gov/
    https://ssd.jpl.nasa.gov/horizons.cgi
    https://es.m.wikipedia.org/wiki/M%C3%A9trica_de_Schwarzschild
    https://es.wikipedia.org/wiki/Anexo:Datos_de_los_planetas_del_sistema_solar
    https://codigofacilito.com/cursos/JAVA
    https://cs.uns.edu.ar/~ldm/mypage/data/oc/info/guia_para_la_documentacion_de_proyectos_de_software.pdf
    https://es.slideshare.net/cpavella/8b-curso-de-poo-en-java-paso-de-diagrama-clases-a-java-1
    http://www.ux1.eiu.edu/~cfadd/1150/07Mom/Inelastic.html
    https://www.epochconverter.com/

5) Todo
    a) Create a list of reduced elements to start to debug the final functionality
    b) Finish the joint method with a energy report of collision
    c) Dump distances between elements
        c1) Check if the distance is always reduced and didn't has more than 1 minimun
        c2) If there are more than a minimum check if it's only one by orbit
    d) Strategies:
        d1) If  minimun recalculate target when the minimun distance happens
        d2) Else a corrective method will be neccesary, like partial corrections
    
    